# coding: utf-8

"""
    letsrolld API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class DirectorFilmsInner(BaseModel):
    """
    DirectorFilmsInner
    """
    id: Optional[StrictInt] = None
    title: StrictStr = Field(...)
    description: Optional[StrictStr] = None
    year: Optional[StrictInt] = None
    rating: Optional[StrictStr] = None
    runtime: Optional[StrictInt] = None
    lb_url: Optional[StrictStr] = None
    jw_url: Optional[StrictStr] = None
    genres: Optional[conlist(StrictStr)] = None
    countries: Optional[conlist(StrictStr)] = None
    offers: Optional[conlist(StrictStr)] = None
    directors: Optional[conlist(StrictInt)] = None
    __properties = ["id", "title", "description", "year", "rating", "runtime", "lb_url", "jw_url", "genres", "countries", "offers", "directors"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DirectorFilmsInner:
        """Create an instance of DirectorFilmsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if jw_url (nullable) is None
        # and __fields_set__ contains the field
        if self.jw_url is None and "jw_url" in self.__fields_set__:
            _dict['jw_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DirectorFilmsInner:
        """Create an instance of DirectorFilmsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DirectorFilmsInner.parse_obj(obj)

        _obj = DirectorFilmsInner.parse_obj({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "year": obj.get("year"),
            "rating": obj.get("rating"),
            "runtime": obj.get("runtime"),
            "lb_url": obj.get("lb_url"),
            "jw_url": obj.get("jw_url"),
            "genres": obj.get("genres"),
            "countries": obj.get("countries"),
            "offers": obj.get("offers"),
            "directors": obj.get("directors")
        })
        return _obj


